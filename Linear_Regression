import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score

# Create Data points
x = np.linspace(start=0,stop=10,num=100,
                endpoint=True,dtype=np.float16)
print('x - shape:',x.shape)

# y = mx+c
m = np.tan(np.radians(45))
c = np.random.randint(low=0,high=10,size=None,dtype=np.int16)
# So
y = m*x+c
print('y - shape:',y.shape)

# Plotting Data
plt.scatter(x,y,s=0.5,c='red',marker='*',edgecolors='black')
plt.title('Pure Virtual Data')
plt.legend(['Generated Data Points'])
plt.show()

# Adding
y += np.random.random(size=(100))*2

# Plotting updated Data
plt.scatter(x,y,s=0.5,c='red',marker='*',edgecolors='black')
plt.title('Generated Data')
plt.legend(['Generated Data Points'])
plt.show()

# Reashaping
x = x.reshape((-1,1))
y = y.reshape((-1,1))
print('After reshaping:')
print('x - shape:',x.shape)
print('y - shape:',y.shape)

# Split the data into training/testing sets
X_train = x[:80]
X_test = x[80:]

# Split the targets into training/testing sets
y_train = y[:80]
y_test = y[80:]

print('After Splitting:')
print('x-train - shape:',X_train.shape)
print('y-train - shape:',X_test.shape)
print('x-test - shape:',y_train.shape)
print('y-test - shape:',y_test.shape)

# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X_train, y_train)

# Make predictions using the testing set
y_pred = regr.predict(X_test)

# The coefficients
print('Coefficients: \n', regr.coef_[0][0])
print('interception:',regr.intercept_[0])

# The mean squared error
print('Mean squared error: %.2f'
      % mean_squared_error(y_test,y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
      % r2_score(y_test,y_pred))

# Plot outputs
plt.scatter(X_test,y_test,color='red',marker='*')
plt.plot(X_test,y_pred, color='blue', linewidth=1)
plt.title('Prediction')
plt.legend(['Predicted Regr. Line','Data Points'])

#plt.xticks(())
#plt.yticks(())

plt.show()
